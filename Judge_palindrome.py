'''
9. 回文数
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
示例 1:
输入: 121
输出: true
示例 2:
输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:
输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
进阶:
你能不将整数转为字符串来解决这个问题吗？
'''
# 解法1：
class Solution:
    def isPalindrome(self, x: int) -> bool:
        # 将参数转换为字符串
        a=str(x)
        # 取一个临时变量将a这个字符串反转
        b = a[::-1]
        # 判断这两个字符串是否相等，如果一样，说明是回文
        if a==b:
            return True
        # 否则不是回文
        else:
            return False

# 解法2：
class Solution:
    def isPalindrome(self, x: int) -> bool:
        # 1）如果这个数是负数，一定不是回文。
        # 2）如果这个数字对10取余等0，但是这个数字还不是0那这个数一定也不是回文
        if(x<0 or(x%10==0 and x!=0)):
            return False
        # 设置一个回文的初始值为0
        reversum=0
        # 这个给定的参数一直在取余而回文一直在*10，所以判断条件是给定的参数小于回文停止循环
        while(x>reversum):
            # 回文等于这个数字对10取余在加上回文*10（第一次的时候回文=0）
            reversum=reversum*10+x%10
            # 这个数字再整除10
            x//=10
        # 只要循环结束后，这个数字等于回文，或者是回文整除10等于这个数就说明是回文
        return x==reversum or x==reversum//10